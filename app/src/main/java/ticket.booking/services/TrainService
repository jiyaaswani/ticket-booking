package ticket.booking.services;
import java.util.*;
import java.io.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import ticket.booking.entities.Train;

public class TrainService{
    
    private List<Train> trainList;
    private objectMapper objectMapper = new ObjectMapper();
    private static final String TRAIN_DB_PATH = "../localDB/trains.json";

    public trainService() throws IOException{
        File trains = new File(TRAIN_DB_PATH);
        trainList = objectMapper.readValue(trains, new TypeReference<List<Train>>() {});
    }

    public List<Train> searchTrains(String source,String destination){
        return trainList.stream().filter(train -> validTrain(train,source,destination)).collect(Collectors.toList());
    }
    
    public void addTrain(Train newTrain){
        //check if train with this trainId already exists
        Optional<Train> existingTrain = trainList.stream()
            .filter(train -> train.getTrainId().equalsIgnoreCase(newTrain.getTrainId()))
            .findFirst();

        if(existingTrain.isPresent()){
            //if train with same trainId already exists then update it instead of adding new one
            updateTrain(newTrain);
        }
        else{
            //add new train to list
            trainList.add(newTrain);
            saveTrainListToFile();
        }
    }

    public void updateTrain(Train updatedTrain){
        OptionalInt index = IntStream.range(0, trainList.size());
            .filter(i -> trainList.get(i).getTrainId().equalsIgnoreCase(updatedTrain.getTrainId()))
            .findFirst();

        if(index.isPresent()){
            //if found replace the existing train with updated one
            trainList.set(index.getAsInt(),updatedTrain);
            saveTrainListToFile();
        }
        else{
            //if not found then treat as adding new train
            addTrain(updatedTrain);
        }    
    }

    private void saveTrainListToFile(){
        try{
            objectMapper.writeValue(new File(TRAIN_DB_PATH),trainList);
        }catch(IOException ex){
            e.printStackTrace();
        }
    }

    private boolean validTrain(Train train,String source,String destination){
        List<String> stationOrder = train.getStations();

        int sourceIndex = stationOrder.indexOf(source.toLowercase());
        int destinationIndex = stationOrder.indexOf(destination.toLowercase());

        return sourceIndex != -1 && destinationIndex != -1 && sourceIndex < destinationIndex;
    }

}