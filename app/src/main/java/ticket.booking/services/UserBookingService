package ticket.booking.services;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import ticket.booking.entities.Ticket;
import ticket.booking.entities.Train;
import ticket.booking.entities.User;
import ticket.booking.util.UserServiceUtil;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;

public class UserBookingService{
    private User user;

    private List<User> userList;

    private ObjectMapper objectMapper = new ObjectMapper() 

    private static final String USERS_PATH = "app/src/main/java/ticket.booking/localDB/users.json";

    public UserBookingService(User user1) throws IOException{
        this.user = user1;
        loadUsers();
    }

    public UserBookingService() throws IOException{
        loadUsers();
    }

    public List<User> loadUsers(){
        File users = new File(USERS_PATH);

        return objectMapper.readValue(users, new TypeReference<List<User>>() {});
    }

    public Boolean loginUser(){
        Optional<User> foundUser = userList.stream().filter(user1 -> {
            return user1.getName().equals(user.getName()) && UserServiceUtil.checkPassword(user.getPassword(), user1.getHashedPassword());
        }).findFirst();
        return foundUser.isPresent();
    }

    public Boolean signUp(User user1){
        try{
            userList.add(user1);
            saveUserListToFile();
            return Boolean.TRUE;
        }catch(IOException ex){
            return Boolean.FALSE;
        }
    }

    private void saveUserListToFile() throws IOException{
        File usersFile = new File(USERS_PATH);
        objectMapper.writeValue(usersFile,userList);
    }
    
    public void fetchBooking(){
        user.printTickets();
    }

    public Boolean cancelBooking(String ticketID){
        Scanner s = new Scanner();
        System.out.println("Enter ticketID of ticket to cancel");
        ticketID = s.next();

        if(ticketID == null || ticketID.isEmpty()){
            System.out.println("ticketID cannot be null or empty");
            return Boolean.FALSE;
        }

        String finalticketID1 = ticketID; //strings are immutable
        boolean removed = user.getTicketsBooked().removeIf(ticket -> ticket.getTicketId().equals(finalticketID1))
    
        String finalticketID = ticketID;
        user.getTicketsBooked().removeIf(Ticket -> Ticket.getTicketId().equals(finalticketID))
        if(removed){
            System.out.println("Ticket with Id " + ticketID + " has been cancelled.");
            return Boolean.TRUE;
        }
        else{
            System.out.println("No ticket found with Id " + ticketID);
            return Boolean.FALSE;
        }

    }

    public List<Train> getTrains(String source,String destination){
        try{
            TrainService trainService = new TrainService();
            return trainService.searchTrains(source, destination);
        }catch(IOException ex){
            return new ArrayList<>();
        }
        
    }

    public List<List<Integer>> fetchSeats(Train train){
        return train.getSeats();
    }

    public Boolean bookTrainSeat(Train train,int row,int seat){
        try{
            TrainService trainService = new TrainService();
            List<List<Integer>> = Train.getSeats();
            if(row >= 0 && row < seats.size() && seat >= 0 && seats.get(row).size()){
                if(seats.get(row).get(seat) == 0){
                    seats.get(row).set(seat, 1);
                    train.setSeats(seats);
                    trainService.addTrain(train);
                    return true; //booking done
                }
                else{
                    return false; //seat is booked already
                }
            else{
                return false; //invalid row or seat index
            }
            }
        }catch(IOException ex){
            return Boolean.FALSE;
        }
    }
}